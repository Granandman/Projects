# Importing necessary modules
import os
import re
import datetime

def extract_arp_table():
    # Use os.popen() to execute a shell command in Python
    arp_table = os.popen('arp -a').read()

    # Split the ARP table into lines
    arp_lines = arp_table.split('\n')

    # Create a dictionary to store the final filtered data
    filtered_data = {}

    # Regular expression pattern for IP and MAC addresses
    pattern = r"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+(\w\w-\w\w-\w\w-\w\w-\w\w-\w\w)"

    for line in arp_lines:
        # Find matches
        matches = re.findall(pattern, line)

        # If a match is found
        if matches:
            ip, mac = matches[0]
            # Check if MAC address is already in the dictionary
            if mac in filtered_data:
                filtered_data[mac].append(ip)
            else:
                filtered_data[mac] = [ip]

    return filtered_data

def identify_mac_duplication(filtered_data):
    for mac, ips in filtered_data.items():
        if len(ips) > 1:
            print(f"Potential ARP Spoofing detected: MAC address {mac} is associated with multiple IP addresses: {ips}")
            log_event(mac, ips)

def log_event(mac, ips):
    timestamp = datetime.datetime.now()
    with open('arp_spoofing_log.txt', 'a') as f:
        f.write(f"{timestamp}: Potential ARP Spoofing detected: MAC address {mac} is associated with multiple IP addresses: {ips}\n")

if __name__ == "__main__":
    arp_table = extract_arp_table()
    identify_mac_duplication(arp_table)
